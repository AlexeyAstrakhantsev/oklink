import asyncio
import re
from playwright.async_api import async_playwright

async def scrape_tooltips(url: str, attempts: int = 5):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto(url)

        tooltips = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltips
        for attempt in range(1, attempts + 1):
            print(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {attempts}")
            try:
                address_elements = await page.query_selector_all(".index_innerClassName__6ivtc")
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(address_elements)} –∞–¥—Ä–µ—Å–æ–≤")

                for i in range(len(address_elements)):
                    try:
                        fresh_elements = await page.query_selector_all(".index_innerClassName__6ivtc")
                        if i >= len(fresh_elements):
                            continue

                        element = fresh_elements[i]
                        await element.hover()
                        await page.wait_for_timeout(300)  # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip

                        tooltip_el = await page.query_selector(".index_title__9lx6D")
                        if tooltip_el:
                            text = await tooltip_el.inner_text()
                            tooltip_text = text.strip()
                            print(f"üü° Tooltip: {tooltip_text}")
                            tooltips.add(tooltip_text)

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")

                print(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltip'–æ–≤: {len(tooltips)}")
                break

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                if attempt == attempts:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ tooltips –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                await page.reload()
                await page.wait_for_timeout(3000)

        await browser.close()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞–∑–±–æ—Ä tooltip'–æ–≤
        parsed_results = []
        for tooltip in tooltips:
            match = re.match(r"(?P<type>\w+):\s+(?P<name>.+?)\s+(?P<address>0x[a-fA-F0-9]{40})", tooltip)
            if match:
                parsed_results.append({
                    "type": match.group("type"),
                    "name": match.group("name"),
                    "address": match.group("address")
                })

        print(f"\nüîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏: {len(parsed_results)}")
        for item in parsed_results:
            print(f"üîπ Type: {item['type']}, Name: {item['name']}, Address: {item['address']}")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
asyncio.run(scrape_tooltips("https://www.oklink.com/ethereum/tx-list", attempts=3))
