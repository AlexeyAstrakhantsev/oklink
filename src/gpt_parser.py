import asyncio
import re
from playwright.async_api import async_playwright
import logging
from db.models import Database, AddressRepository
import os
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
blockchain = os.getenv('BLOCKCHAIN', 'ethereum')
url = f"https://www.oklink.com/{blockchain}/tx-list"

def is_valid_address(address: str, chain: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–æ–∫—á–µ–π–Ω–∞"""
    if chain.lower() == 'tron':
        # Tron –∞–¥—Ä–µ—Å–∞ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ: –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å T –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç ...
        return address.startswith('T') and '...' in address
    else:
        # EVM –∞–¥—Ä–µ—Å–∞ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ: –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç ...
        return address.startswith('0x') and '...' in address

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parser.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT')
}

async def scrape_tooltips(url: str, attempts: int = 5):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(DB_CONFIG)
    db.init_tables()
    address_repo = AddressRepository(db)
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = None  # –ë—É–¥–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            try:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if page is None or page.is_closed():
                    logger.info("üåü –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞")
                    page = await browser.new_page()
                    
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
                page.set_default_timeout(30000)  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ 60)
                    
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await page.goto(url, wait_until='networkidle', timeout=30000)
                logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                await page.wait_for_timeout(1000)  # 1 —Å–µ–∫—É–Ω–¥–∞ –≤–º–µ—Å—Ç–æ 2

                tooltips = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltips
                for attempt in range(1, attempts + 1):
                    logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {attempts}")
                    try:
                        address_elements = await page.query_selector_all(".index_wrapper__ns7tB")
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(address_elements)} –∞–¥—Ä–µ—Å–æ–≤")

                        for i in range(len(address_elements)):
                            try:
                                fresh_elements = await page.query_selector_all(".index_wrapper__ns7tB")
                                if i >= len(fresh_elements):
                                    continue

                                element = fresh_elements[i]
                                
                                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–∏—Å–∫–∞
                                risk_icon = await element.query_selector(".index_riskIcon__u0+KY")
                                if not risk_icon:
                                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞, –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –±–ª–æ–∫–µ
                                    parent = await element.evaluate('el => el.closest(".index_wrapper__ns7tB")')
                                    if parent:
                                        risk_icon = await parent.query_selector(".index_riskIcon__u0+KY")
                                
                                if risk_icon:
                                    logger.info("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ —Ä–∏—Å–∫–∞")
                                    await risk_icon.hover()
                                    await page.wait_for_timeout(300)
                                    
                                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—É–ª—Ç–∏–ø–∞ —Ä–∏—Å–∫–∞
                                    try:
                                        risk_tooltip = await page.wait_for_selector(".okui-popup-layer-content.index_conWrapper__PSJYS", timeout=1000)
                                        if risk_tooltip:
                                            risk_text = await risk_tooltip.inner_text()
                                            logger.info(f"üî¥ –¢—É–ª—Ç–∏–ø —Ä–∏—Å–∫–∞: {risk_text}")
                                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∏—Å–∫–∞ –∫–∞–∫ –∏–º—è
                                            tooltips.add(risk_text)
                                            continue
                                    except Exception as e:
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É–ª—Ç–∏–ø–∞ —Ä–∏—Å–∫–∞: {e}")
                                else:
                                    logger.debug("‚ÑπÔ∏è –ò–∫–æ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–º—è) - –¥–µ–ª–∞–µ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ
                                logger.info(f"üîÑ –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º: {text}")
                                await element.hover()
                                await page.wait_for_timeout(300)

                                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—É–ª—Ç–∏–ø
                                tooltip_el = await page.query_selector(".index_title__9lx6D")
                                if tooltip_el:
                                    text = await tooltip_el.inner_text()
                                    tooltip_text = text.strip()
                                    logger.info(f"üü° Tooltip: {tooltip_text}")
                                    tooltips.add(tooltip_text)

                            except Exception as e:
                                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")

                        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltip'–æ–≤: {len(tooltips)}")
                        break

                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                        if attempt == attempts:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ tooltips –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                        
                        try:
                            await page.reload(wait_until='networkidle', timeout=30000)
                            await page.wait_for_timeout(2000)  # 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 3
                        except Exception as reload_error:
                            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {reload_error}")
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–º–∞–Ω–∞
                            await page.close()
                            page = await browser.new_page()
                            await page.goto(url, wait_until='networkidle', timeout=30000)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ tooltip'–æ–≤
                parsed_results = []
                for tooltip in tooltips:
                    # –î–ª—è Tron —Ñ–æ—Ä–º–∞—Ç: "Type: Name\nAddress"
                    if blockchain.lower() == 'tron':
                        lines = tooltip.split('\n')
                        if len(lines) == 2:
                            type_name = lines[0].split(': ', 1)
                            if len(type_name) == 2:
                                result = {
                                    "type": type_name[0],
                                    "name": type_name[1],
                                    "address": lines[1].strip()
                                }
                                parsed_results.append(result)
                    else:
                        # –î–ª—è EVM —Ñ–æ—Ä–º–∞—Ç: "Type: Name 0x..." –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "Name 0x..."
                        match = re.match(r"(?:(?P<type>\w+):\s+)?(?P<name>.+?)\s+(?P<address>0x[a-fA-F0-9]{40})", tooltip)
                        if match:
                            result = {
                                "type": match.group("type") or "other",  # –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "other"
                                "name": match.group("name"),
                                "address": match.group("address")
                            }
                            parsed_results.append(result)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        try:
                            address_data = {
                                'address': result['address'],
                                'name': result['name'],
                                'tag': result['type'],
                                'chain': blockchain
                            }
                            address_repo.save_address(address_data)
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å: {result['address']} —Å –∏–º–µ–Ω–µ–º: {result['name']} –∏ —Ç–µ–≥–æ–º: {result['type']}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {result['address']}: {e}")

                logger.info(f"\nüîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏: {len(parsed_results)}")
                for item in parsed_results:
                    logger.info(f"üîπ Type: {item['type']}, Name: {item['name']}, Address: {item['address']}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                logger.info("üí§ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π...")
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    if page and not page.is_closed():
                        await page.close()
                except:
                    pass
                    
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                page = None
                
                logger.info("üí§ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è –ª–∏ –±—Ä–∞—É–∑–µ—Ä
                try:
                    # –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    if browser.is_connected() == False:
                        logger.info("üîÑ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π")
                        browser = await p.chromium.launch(headless=True)
                except Exception as browser_error:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {browser_error}")
                    browser = await p.chromium.launch(headless=True)

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    while True:
        try:
            asyncio.run(scrape_tooltips(url, attempts=3))
        except Exception as e:
            logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            logger.info("üí§ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)
