import asyncio
import re
from playwright.async_api import async_playwright
import logging
from db.models import Database, AddressRepository
import os
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parser.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT')
}

async def scrape_tooltips(url: str, attempts: int = 5):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(DB_CONFIG)
    db.init_tables()
    address_repo = AddressRepository(db)
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            try:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                await page.goto(url)
                await page.wait_for_load_state('networkidle')

                tooltips = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltips
                for attempt in range(1, attempts + 1):
                    logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {attempts}")
                    try:
                        address_elements = await page.query_selector_all(".index_innerClassName__6ivtc")
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(address_elements)} –∞–¥—Ä–µ—Å–æ–≤")

                        for i in range(len(address_elements)):
                            try:
                                fresh_elements = await page.query_selector_all(".index_innerClassName__6ivtc")
                                if i >= len(fresh_elements):
                                    continue

                                element = fresh_elements[i]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                                text = await element.inner_text()
                                text = text.strip()
                                
                                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—ç—Ç–æ –∞–¥—Ä–µ—Å)
                                if text.startswith('0x'):
                                    logger.debug(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å –∞–¥—Ä–µ—Å–æ–º: {text}")
                                    continue
                                    
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–º—è) - –¥–µ–ª–∞–µ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ
                                logger.info(f"üîÑ –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º: {text}")
                                await element.hover()
                                await page.wait_for_timeout(300)  # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip

                                tooltip_el = await page.query_selector(".index_title__9lx6D")
                                if tooltip_el:
                                    text = await tooltip_el.inner_text()
                                    tooltip_text = text.strip()
                                    logger.info(f"üü° Tooltip: {tooltip_text}")
                                    tooltips.add(tooltip_text)

                            except Exception as e:
                                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")

                        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö tooltip'–æ–≤: {len(tooltips)}")
                        break

                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                        if attempt == attempts:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ tooltips –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                        await page.reload()
                        await page.wait_for_timeout(3000)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ tooltip'–æ–≤
                parsed_results = []
                for tooltip in tooltips:
                    match = re.match(r"(?P<type>\w+):\s+(?P<name>.+?)\s+(?P<address>0x[a-fA-F0-9]{40})", tooltip)
                    if match:
                        result = {
                            "type": match.group("type"),
                            "name": match.group("name"),
                            "address": match.group("address")
                        }
                        parsed_results.append(result)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        try:
                            address_data = {
                                'address': result['address'],
                                'name': result['name'],
                                'tag': result['type']
                            }
                            address_repo.save_address(address_data)
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å: {result['address']} —Å –∏–º–µ–Ω–µ–º: {result['name']} –∏ —Ç–µ–≥–æ–º: {result['type']}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {result['address']}: {e}")

                logger.info(f"\nüîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏: {len(parsed_results)}")
                for item in parsed_results:
                    logger.info(f"üîπ Type: {item['type']}, Name: {item['name']}, Address: {item['address']}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (10 —Å–µ–∫—É–Ω–¥)
                logger.info("üí§ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π...")
                await asyncio.sleep(10)

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                logger.info("üí§ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(5)

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    asyncio.run(scrape_tooltips("https://www.oklink.com/ethereum/tx-list", attempts=3))
